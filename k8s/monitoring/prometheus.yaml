apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: mysetlist-prometheus
  namespace: mysetlist-monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 2
  retention: 30d
  retentionSize: 100GiB
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: ssd
        resources:
          requests:
            storage: 50Gi
  resources:
    requests:
      memory: 2Gi
      cpu: 1
    limits:
      memory: 4Gi
      cpu: 2
  serviceAccountName: prometheus
  serviceMonitorSelector:
    matchLabels:
      team: mysetlist
  ruleSelector:
    matchLabels:
      team: mysetlist
  alerting:
    alertmanagers:
    - namespace: mysetlist-monitoring
      name: alertmanager-operated
      port: web
  externalLabels:
    cluster: mysetlist-production
    environment: production
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 2000
  additionalScrapeConfigs:
    name: additional-scrape-configs
    key: prometheus-additional.yaml

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: mysetlist-monitoring
  labels:
    app: prometheus
    component: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: mysetlist-monitoring

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: mysetlist-monitoring
  labels:
    app: prometheus
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app.kubernetes.io/name: prometheus

---
# ServiceMonitor for MySetlist application
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mysetlist-app
  namespace: mysetlist-monitoring
  labels:
    app: mysetlist
    team: mysetlist
    component: monitoring
spec:
  selector:
    matchLabels:
      app: mysetlist
      component: frontend
  namespaceSelector:
    matchNames:
    - mysetlist-production
  endpoints:
  - port: http
    interval: 30s
    path: /api/metrics
    honorLabels: true
    scheme: http
    scrapeTimeout: 10s
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'go_.*'
      action: drop

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: mysetlist-alerts
  namespace: mysetlist-monitoring
  labels:
    app: mysetlist
    team: mysetlist
    component: monitoring
spec:
  groups:
  - name: mysetlist.rules
    interval: 30s
    rules:
    # High CPU usage
    - alert: HighCPUUsage
      expr: rate(container_cpu_usage_seconds_total{pod=~"mysetlist-app-.*"}[5m]) * 100 > 80
      for: 5m
      labels:
        severity: warning
        service: mysetlist
      annotations:
        summary: "High CPU usage detected"
        description: "Pod {{ $labels.pod }} is using {{ $value }}% CPU"
        
    # High memory usage
    - alert: HighMemoryUsage
      expr: container_memory_usage_bytes{pod=~"mysetlist-app-.*"} / container_spec_memory_limit_bytes{pod=~"mysetlist-app-.*"} * 100 > 85
      for: 5m
      labels:
        severity: warning
        service: mysetlist
      annotations:
        summary: "High memory usage detected"
        description: "Pod {{ $labels.pod }} is using {{ $value }}% memory"
        
    # Pod restart rate
    - alert: HighPodRestartRate
      expr: rate(kube_pod_container_status_restarts_total{pod=~"mysetlist-app-.*"}[15m]) > 0
      for: 10m
      labels:
        severity: warning
        service: mysetlist
      annotations:
        summary: "High pod restart rate"
        description: "Pod {{ $labels.pod }} is restarting frequently"
        
    # API response time
    - alert: HighAPIResponseTime
      expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="mysetlist-app"}[5m])) > 2
      for: 5m
      labels:
        severity: warning
        service: mysetlist
      annotations:
        summary: "High API response time"
        description: "95th percentile response time is {{ $value }}s"
        
    # High error rate
    - alert: HighErrorRate
      expr: rate(http_requests_total{job="mysetlist-app",status=~"5.."}[5m]) / rate(http_requests_total{job="mysetlist-app"}[5m]) > 0.05
      for: 10m
      labels:
        severity: critical
        service: mysetlist
      annotations:
        summary: "High error rate detected"
        description: "Error rate is {{ $value | humanizePercentage }}"
        
    # Low replica count
    - alert: LowReplicaCount
      expr: kube_deployment_status_replicas_available{deployment="mysetlist-app"} < 2
      for: 5m
      labels:
        severity: critical
        service: mysetlist
      annotations:
        summary: "Low replica count"
        description: "Only {{ $value }} replicas available for mysetlist-app"
        
    # Database connection issues
    - alert: DatabaseConnectionIssues
      expr: increase(database_connection_errors_total[5m]) > 10
      for: 2m
      labels:
        severity: critical
        service: mysetlist
      annotations:
        summary: "Database connection issues"
        description: "{{ $value }} database connection errors in the last 5 minutes"

---
# Additional scrape configs for external services
apiVersion: v1
kind: Secret
metadata:
  name: additional-scrape-configs
  namespace: mysetlist-monitoring
  labels:
    app: prometheus
    component: monitoring
stringData:
  prometheus-additional.yaml: |
    - job_name: 'node-exporter'
      static_configs:
      - targets: ['node-exporter:9100']
      
    - job_name: 'nginx-ingress'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - ingress-nginx
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
        
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name