# Outputs for MySetlist Infrastructure

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane"
  value       = module.eks.cluster_security_group_id
}

output "cluster_iam_role_name" {
  description = "IAM role name associated with EKS cluster"
  value       = module.eks.cluster_iam_role_name
}

output "cluster_certificate_authority_data" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = module.eks.cluster_certificate_authority_data
}

output "cluster_oidc_issuer_url" {
  description = "The URL on the EKS cluster for the OpenID Connect identity provider"
  value       = module.eks.cluster_oidc_issuer_url
}

output "node_groups" {
  description = "EKS node groups"
  value       = module.eks.eks_managed_node_groups
}

output "vpc_id" {
  description = "ID of the VPC where the cluster is deployed"
  value       = module.vpc.vpc_id
}

output "vpc_cidr_block" {
  description = "The CIDR block of the VPC"
  value       = module.vpc.vpc_cidr_block
}

output "private_subnets" {
  description = "List of IDs of private subnets"
  value       = module.vpc.private_subnets
}

output "public_subnets" {
  description = "List of IDs of public subnets"
  value       = module.vpc.public_subnets
}

output "route53_zone_id" {
  description = "Route53 hosted zone ID"
  value       = aws_route53_zone.main.zone_id
}

output "route53_zone_name_servers" {
  description = "Route53 hosted zone name servers"
  value       = aws_route53_zone.main.name_servers
}

output "acm_certificate_arn" {
  description = "ARN of the ACM certificate"
  value       = aws_acm_certificate.main.arn
}

output "backup_s3_bucket" {
  description = "S3 bucket for backups"
  value       = aws_s3_bucket.backups.bucket
}

output "kms_key_id" {
  description = "KMS key ID for secrets encryption"
  value       = aws_kms_key.secrets.key_id
}

output "load_balancer_controller_role_arn" {
  description = "ARN of the Load Balancer Controller IAM role"
  value       = module.load_balancer_controller_irsa_role.iam_role_arn
}

output "cluster_autoscaler_role_arn" {
  description = "ARN of the Cluster Autoscaler IAM role"
  value       = module.cluster_autoscaler_irsa_role.iam_role_arn
}

output "external_dns_role_arn" {
  description = "ARN of the External DNS IAM role"
  value       = module.external_dns_irsa_role.iam_role_arn
}

output "ebs_csi_driver_role_arn" {
  description = "ARN of the EBS CSI Driver IAM role"
  value       = module.ebs_csi_irsa_role.iam_role_arn
}

# Kubeconfig
output "kubeconfig" {
  description = "kubectl config as generated by the module"
  value = templatefile("${path.module}/kubeconfig.tpl", {
    cluster_name     = module.eks.cluster_name
    endpoint         = module.eks.cluster_endpoint
    region           = var.aws_region
    certificate_data = module.eks.cluster_certificate_authority_data
  })
  sensitive = true
}

# Connection instructions
output "connection_instructions" {
  description = "Instructions for connecting to the cluster"
  value = <<-EOT
    # Configure kubectl
    aws eks update-kubeconfig --region ${var.aws_region} --name ${module.eks.cluster_name}
    
    # Verify connection
    kubectl get nodes
    
    # Install monitoring stack
    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    helm repo add grafana https://grafana.github.io/helm-charts
    helm repo update
    
    # Create monitoring namespace
    kubectl create namespace mysetlist-monitoring
    
    # Install Prometheus
    helm install prometheus prometheus-community/kube-prometheus-stack \
      --namespace mysetlist-monitoring \
      --values k8s/monitoring/prometheus-values.yaml
    
    # Install OpenTelemetry Operator
    kubectl apply -f https://github.com/open-telemetry/opentelemetry-operator/releases/latest/download/opentelemetry-operator.yaml
    
    # Apply monitoring configurations
    kubectl apply -f k8s/monitoring/ -n mysetlist-monitoring
  EOT
}

output "domain_configuration" {
  description = "Domain configuration instructions"
  value = <<-EOT
    Configure your domain DNS with these name servers:
    ${join("\n    ", aws_route53_zone.main.name_servers)}
    
    SSL Certificate ARN: ${aws_acm_certificate.main.arn}
    
    After DNS propagation, the following domains will be available:
    - https://mysetlist.com
    - https://www.mysetlist.com
    - https://api.mysetlist.com
  EOT
}

output "security_information" {
  description = "Security and access information"
  value = <<-EOT
    SSH Key for EKS nodes: ${aws_key_pair.eks_nodes.key_name}
    
    Private key (save securely):
    ${tls_private_key.this.private_key_pem}
    
    KMS Key for secrets: ${aws_kms_key.secrets.arn}
    
    Security Groups:
    - Cluster: ${module.eks.cluster_security_group_id}
    - Nodes: ${module.eks.node_security_group_id}
    - Remote Access: ${aws_security_group.remote_access.id}
  EOT
  sensitive = true
}